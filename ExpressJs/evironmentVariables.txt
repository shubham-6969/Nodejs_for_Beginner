üîπ What is an Environment Variable?

An environment variable is a variable that is not hardcoded inside your code, but stored outside in the system or a config file.

It is mainly used for:

Sensitive data ‚Üí passwords, API keys, secret tokens.

Environment-based settings ‚Üí like different configs for development, testing, and production.

Got it Shubham üëç Let me explain **Environment Variables in Express.js** in clear English.

---

## üîπ Why use it in Express.js?

Imagine you have a MongoDB connection string. If you hardcode it like this:

```js
const mongoose = require("mongoose");
mongoose.connect("mongodb+srv://admin:12345@cluster.mongodb.net/mydb");
```

üëâ This is **unsafe**, because your password will be exposed.

Instead, you put it in an environment variable.

---

## üîπ Example with Express.js

1. **Install dotenv**

```bash
npm install dotenv
```

2. **Create a `.env` file** in your project root:

```env
PORT=5000
DB_URL=mongodb+srv://admin:12345@cluster.mongodb.net/mydb
JWT_SECRET=mysupersecretkey
```

3. **Use it in `app.js`**

```js
import express from "express";
import dotenv from "dotenv";

dotenv.config(); // Loads variables from .env file

const app = express();

const PORT = process.env.PORT || 3000;
const DB_URL = process.env.DB_URL;

app.get("/", (req, res) => {
  res.send("Environment variable test successful!");
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`DB URL is: ${DB_URL}`);
});
```

---

## üîπ Benefits

1. **Security** ‚Üí No passwords or secrets inside code.
2. **Flexibility** ‚Üí Different configs for dev, test, and prod.
3. **Portability** ‚Üí Easy to deploy anywhere without code changes.

---

Perfect üëç Let me give you the **syntax for setting environment variables** from the command line step by step.

---

## üîπ **Linux / macOS (Bash, Zsh, etc.)**

### Syntax:

```bash
export VARIABLE_NAME=value
```

### Example:

```bash
export PORT=5000
export DB_URL=mongodb://localhost:27017/mydb
```

üëâ Run your app:

```bash
node app.js
```

---

## üîπ **Windows Command Prompt (CMD)**

### Syntax:

```cmd
set VARIABLE_NAME=value
```

### Example:

```cmd
set PORT=5000
set DB_URL=mongodb://localhost:27017/mydb
node app.js
```

---

## üîπ **Windows PowerShell**

### Syntax:

```powershell
$env:VARIABLE_NAME="value"
```

### Example:

```powershell
$env:PORT="5000"
$env:DB_URL="mongodb://localhost:27017/mydb"
node app.js
```

---

## üîπ **One-liner (Linux/macOS only)**

### Syntax:

```bash
VARIABLE_NAME=value VARIABLE2=value2 command
```

### Example:

```bash
PORT=5000 DB_URL=mongodb://localhost:27017/mydb node app.js
```

---

‚úÖ In your Express app, you always access them with:

```js
process.env.VARIABLE_NAME
```

Example:

```js
console.log(process.env.PORT);     // 5000
console.log(process.env.DB_URL);   // mongodb://localhost:27017/mydb
```

---



üëâ In simple words:
**Environment variables make your Express.js app more secure and flexible by keeping secrets and settings outside the code.**

---

Do you want me to show you a **real Express.js project example with MongoDB using environment variables** so it feels practical?
